//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NoteManager.NoteManagerServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserDTO", Namespace="http://schemas.datacontract.org/2004/07/NoteManagerWCF.DTO")]
    [System.SerializableAttribute()]
    public partial class UserDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Login {
            get {
                return this.LoginField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginField, value) != true)) {
                    this.LoginField = value;
                    this.RaisePropertyChanged("Login");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NoteDTO", Namespace="http://schemas.datacontract.org/2004/07/NoteManagerWCF.DTO")]
    [System.SerializableAttribute()]
    public partial class NoteDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateCreationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateModificationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HoraireCreationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HoraireModificationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string JourCreationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string JourModificationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModificationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UtilisateurField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creation {
            get {
                return this.CreationField;
            }
            set {
                if ((object.ReferenceEquals(this.CreationField, value) != true)) {
                    this.CreationField = value;
                    this.RaisePropertyChanged("Creation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateCreation {
            get {
                return this.DateCreationField;
            }
            set {
                if ((this.DateCreationField.Equals(value) != true)) {
                    this.DateCreationField = value;
                    this.RaisePropertyChanged("DateCreation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateModification {
            get {
                return this.DateModificationField;
            }
            set {
                if ((this.DateModificationField.Equals(value) != true)) {
                    this.DateModificationField = value;
                    this.RaisePropertyChanged("DateModification");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HoraireCreation {
            get {
                return this.HoraireCreationField;
            }
            set {
                if ((object.ReferenceEquals(this.HoraireCreationField, value) != true)) {
                    this.HoraireCreationField = value;
                    this.RaisePropertyChanged("HoraireCreation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HoraireModification {
            get {
                return this.HoraireModificationField;
            }
            set {
                if ((object.ReferenceEquals(this.HoraireModificationField, value) != true)) {
                    this.HoraireModificationField = value;
                    this.RaisePropertyChanged("HoraireModification");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JourCreation {
            get {
                return this.JourCreationField;
            }
            set {
                if ((object.ReferenceEquals(this.JourCreationField, value) != true)) {
                    this.JourCreationField = value;
                    this.RaisePropertyChanged("JourCreation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JourModification {
            get {
                return this.JourModificationField;
            }
            set {
                if ((object.ReferenceEquals(this.JourModificationField, value) != true)) {
                    this.JourModificationField = value;
                    this.RaisePropertyChanged("JourModification");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Modification {
            get {
                return this.ModificationField;
            }
            set {
                if ((object.ReferenceEquals(this.ModificationField, value) != true)) {
                    this.ModificationField = value;
                    this.RaisePropertyChanged("Modification");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Utilisateur {
            get {
                return this.UtilisateurField;
            }
            set {
                if ((this.UtilisateurField.Equals(value) != true)) {
                    this.UtilisateurField = value;
                    this.RaisePropertyChanged("Utilisateur");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NoteManagerServiceReference.INoteManagerService")]
    public interface INoteManagerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteManagerService/ConnectUser", ReplyAction="http://tempuri.org/INoteManagerService/ConnectUserResponse")]
        NoteManager.NoteManagerServiceReference.UserDTO ConnectUser(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteManagerService/ConnectUser", ReplyAction="http://tempuri.org/INoteManagerService/ConnectUserResponse")]
        System.Threading.Tasks.Task<NoteManager.NoteManagerServiceReference.UserDTO> ConnectUserAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteManagerService/SaveNote", ReplyAction="http://tempuri.org/INoteManagerService/SaveNoteResponse")]
        NoteManager.NoteManagerServiceReference.NoteDTO SaveNote(string name, string message, int userid, System.DateTime dateCreation, System.DateTime dateModification);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteManagerService/SaveNote", ReplyAction="http://tempuri.org/INoteManagerService/SaveNoteResponse")]
        System.Threading.Tasks.Task<NoteManager.NoteManagerServiceReference.NoteDTO> SaveNoteAsync(string name, string message, int userid, System.DateTime dateCreation, System.DateTime dateModification);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteManagerService/UpdateNote", ReplyAction="http://tempuri.org/INoteManagerService/UpdateNoteResponse")]
        NoteManager.NoteManagerServiceReference.NoteDTO UpdateNote(NoteManager.NoteManagerServiceReference.NoteDTO note, System.DateTime dateModification);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteManagerService/UpdateNote", ReplyAction="http://tempuri.org/INoteManagerService/UpdateNoteResponse")]
        System.Threading.Tasks.Task<NoteManager.NoteManagerServiceReference.NoteDTO> UpdateNoteAsync(NoteManager.NoteManagerServiceReference.NoteDTO note, System.DateTime dateModification);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteManagerService/DeleteNote", ReplyAction="http://tempuri.org/INoteManagerService/DeleteNoteResponse")]
        void DeleteNote(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteManagerService/DeleteNote", ReplyAction="http://tempuri.org/INoteManagerService/DeleteNoteResponse")]
        System.Threading.Tasks.Task DeleteNoteAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteManagerService/ListAllUsers", ReplyAction="http://tempuri.org/INoteManagerService/ListAllUsersResponse")]
        NoteManager.NoteManagerServiceReference.UserDTO[] ListAllUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteManagerService/ListAllUsers", ReplyAction="http://tempuri.org/INoteManagerService/ListAllUsersResponse")]
        System.Threading.Tasks.Task<NoteManager.NoteManagerServiceReference.UserDTO[]> ListAllUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteManagerService/ListAllNotes", ReplyAction="http://tempuri.org/INoteManagerService/ListAllNotesResponse")]
        NoteManager.NoteManagerServiceReference.NoteDTO[] ListAllNotes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteManagerService/ListAllNotes", ReplyAction="http://tempuri.org/INoteManagerService/ListAllNotesResponse")]
        System.Threading.Tasks.Task<NoteManager.NoteManagerServiceReference.NoteDTO[]> ListAllNotesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteManagerService/ListAllNotesOfUser", ReplyAction="http://tempuri.org/INoteManagerService/ListAllNotesOfUserResponse")]
        NoteManager.NoteManagerServiceReference.NoteDTO[] ListAllNotesOfUser(int utilisateur);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteManagerService/ListAllNotesOfUser", ReplyAction="http://tempuri.org/INoteManagerService/ListAllNotesOfUserResponse")]
        System.Threading.Tasks.Task<NoteManager.NoteManagerServiceReference.NoteDTO[]> ListAllNotesOfUserAsync(int utilisateur);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteManagerService/RechercheNote", ReplyAction="http://tempuri.org/INoteManagerService/RechercheNoteResponse")]
        NoteManager.NoteManagerServiceReference.NoteDTO[] RechercheNote(string recherche, int utilisateur);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteManagerService/RechercheNote", ReplyAction="http://tempuri.org/INoteManagerService/RechercheNoteResponse")]
        System.Threading.Tasks.Task<NoteManager.NoteManagerServiceReference.NoteDTO[]> RechercheNoteAsync(string recherche, int utilisateur);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INoteManagerServiceChannel : NoteManager.NoteManagerServiceReference.INoteManagerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NoteManagerServiceClient : System.ServiceModel.ClientBase<NoteManager.NoteManagerServiceReference.INoteManagerService>, NoteManager.NoteManagerServiceReference.INoteManagerService {
        
        public NoteManagerServiceClient() {
        }
        
        public NoteManagerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public NoteManagerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NoteManagerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NoteManagerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public NoteManager.NoteManagerServiceReference.UserDTO ConnectUser(string login, string password) {
            return base.Channel.ConnectUser(login, password);
        }
        
        public System.Threading.Tasks.Task<NoteManager.NoteManagerServiceReference.UserDTO> ConnectUserAsync(string login, string password) {
            return base.Channel.ConnectUserAsync(login, password);
        }
        
        public NoteManager.NoteManagerServiceReference.NoteDTO SaveNote(string name, string message, int userid, System.DateTime dateCreation, System.DateTime dateModification) {
            return base.Channel.SaveNote(name, message, userid, dateCreation, dateModification);
        }
        
        public System.Threading.Tasks.Task<NoteManager.NoteManagerServiceReference.NoteDTO> SaveNoteAsync(string name, string message, int userid, System.DateTime dateCreation, System.DateTime dateModification) {
            return base.Channel.SaveNoteAsync(name, message, userid, dateCreation, dateModification);
        }
        
        public NoteManager.NoteManagerServiceReference.NoteDTO UpdateNote(NoteManager.NoteManagerServiceReference.NoteDTO note, System.DateTime dateModification) {
            return base.Channel.UpdateNote(note, dateModification);
        }
        
        public System.Threading.Tasks.Task<NoteManager.NoteManagerServiceReference.NoteDTO> UpdateNoteAsync(NoteManager.NoteManagerServiceReference.NoteDTO note, System.DateTime dateModification) {
            return base.Channel.UpdateNoteAsync(note, dateModification);
        }
        
        public void DeleteNote(int id) {
            base.Channel.DeleteNote(id);
        }
        
        public System.Threading.Tasks.Task DeleteNoteAsync(int id) {
            return base.Channel.DeleteNoteAsync(id);
        }
        
        public NoteManager.NoteManagerServiceReference.UserDTO[] ListAllUsers() {
            return base.Channel.ListAllUsers();
        }
        
        public System.Threading.Tasks.Task<NoteManager.NoteManagerServiceReference.UserDTO[]> ListAllUsersAsync() {
            return base.Channel.ListAllUsersAsync();
        }
        
        public NoteManager.NoteManagerServiceReference.NoteDTO[] ListAllNotes() {
            return base.Channel.ListAllNotes();
        }
        
        public System.Threading.Tasks.Task<NoteManager.NoteManagerServiceReference.NoteDTO[]> ListAllNotesAsync() {
            return base.Channel.ListAllNotesAsync();
        }
        
        public NoteManager.NoteManagerServiceReference.NoteDTO[] ListAllNotesOfUser(int utilisateur) {
            return base.Channel.ListAllNotesOfUser(utilisateur);
        }
        
        public System.Threading.Tasks.Task<NoteManager.NoteManagerServiceReference.NoteDTO[]> ListAllNotesOfUserAsync(int utilisateur) {
            return base.Channel.ListAllNotesOfUserAsync(utilisateur);
        }
        
        public NoteManager.NoteManagerServiceReference.NoteDTO[] RechercheNote(string recherche, int utilisateur) {
            return base.Channel.RechercheNote(recherche, utilisateur);
        }
        
        public System.Threading.Tasks.Task<NoteManager.NoteManagerServiceReference.NoteDTO[]> RechercheNoteAsync(string recherche, int utilisateur) {
            return base.Channel.RechercheNoteAsync(recherche, utilisateur);
        }
    }
}
